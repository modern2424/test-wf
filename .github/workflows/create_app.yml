name: Create App

on:
  workflow_dispatch:
    inputs:
      authorization_code:
        type: string
        required: true
        
  
jobs:
  create-app:
    runs-on: ubuntu-latest
    outputs:
      app_id: ${{ steps.create.outputs.app_id }}
      app_name: ${{ steps.create.outputs.app_name }}
      pem_key: ${{ steps.create.outputs.pem_key }}
      org_name: ${{ steps.create.outputs.org_name }}
      app_id_var_name: ${{ steps.name-vars.outputs.app_id_var_name }}
      app_name_var_name: ${{ steps.name-vars.outputs.app_name_var_name }}
      pem_key_secret_name: ${{ steps.name-vars.outputs.pem_key_secret_name }}
    steps: 
    - name: Check out the repository 
      uses: actions/checkout@v2 
      with: 
        fetch-depth: 0

    - name: Run the authorization code to create the app
      id: create
      run: |

        echo "https://api.github.com/app-manifests/$AUTH_CODE/conversions"
        
        RESPONSE_APP_CREATED=$(curl -s -X POST -H "Authorization: Bearer $APP_INSTALL_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        https://api.github.com/app-manifests/$AUTH_CODE/conversions)

        echo "$RESPONSE_APP_CREATED"
        echo "$RESPONSE_APP_CREATED" > response.json

        #Extract required values
        APP_ID=$(jq -r '.id' response.json)
        APP_NAME=$(jq -r '.name' response.json)
        PEM_KEY=$(jq -r '.pem' response.json)
        ORG_NAME=$(jq -r '.owner.login' response.json)

        # Mask PEM Key
        echo "::add-mask::$PEM_KEY"

        echo "Verify app creation. App ID: $INSTALLED_APP_ID"
        
        echo "::set-output name=app_id::$APP_ID"
        echo "::set-output name=app_name::$APP_NAME"
        echo "::set-output name=pem_key::$PEM_KEY"
        echo "::set-output name=org_name::$ORG_NAME"
        
      env:
        APP_INSTALL_TOKEN: ${{ secrets.ORG_TEMP_TOKEN }}
        AUTH_CODE: ${{ inputs.authorization_code }}

    - name: Construct Variable and Secret Names
      id: name-vars
      run: |
        echo "::set-output name=app_id_var_name::${{ needs.create.outputs.org_name }}_APP_ID"
        echo "::set-output name=app_name_var_name::${{ needs.create.outputs.org_name }}_APP_NAME"
        echo "::set-output name=pem_key_secret_name::${{ needs.create.outputs.org_name }}_PEM_KEY"


  create-variables:
    runs-on: ubuntu-latest
    needs: create-app
    steps:
      - name: Check out the repository 
        uses: actions/checkout@v2 
        with: 
          fetch-depth: 0
        
      - name: Create App ID variable
        uses: ./.github/actions/create-variable
        with:
          var_name: ${{ needs.create-app.outputs.app_id_var_name }}
          var_value: ${{ needs.create-app.outputs.app_id }}

      - name: Create Repository Variables
        uses: ./.github/actions/create-variable
        with:
          var_name: ${{ needs.create-app.outputs.app_name_var_name }}
          var_value: ${{ needs.create-app.outputs.app_name }}

  create-secret:
    runs-on: ubuntu-latest
    needs: create-app
    steps:
      - name: Check out the repository 
        uses: actions/checkout@v2 
        with: 
          fetch-depth: 0
          
      - name: Create Repository Secret
        uses: ./.github/actions/create-secret
        with:
          secret_name: ${{ needs.create-app.outputs.pem_key_secret_name }}
          secret_value: ${{ needs.create-app.outputs.pem_key }}

    
      # need to call the gh api to create app from manifest, and then store the response in a variable.
      # then from variable, extract app_slug which will be app name. app id. 
      # also extract pem key and save it as a secret, this part needs encrypting it with org's public key.
      # so need an action to encrypt a secret using org's public key.
